// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: pb/shipping.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShippingServiceClient is the client API for ShippingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShippingServiceClient interface {
	ServiceStatus(ctx context.Context, in *ServiceStatusRequest, opts ...grpc.CallOption) (*ServiceStatusReply, error)
	ShippingOrder(ctx context.Context, in *ShippingOrderRequest, opts ...grpc.CallOption) (*ShippingOrderReply, error)
	FindShipping(ctx context.Context, in *FindShippingRequest, opts ...grpc.CallOption) (*FindShippingReply, error)
	GetAllShipping(ctx context.Context, in *GetAllShippingRequest, opts ...grpc.CallOption) (*GetAllShippingReply, error)
}

type shippingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShippingServiceClient(cc grpc.ClientConnInterface) ShippingServiceClient {
	return &shippingServiceClient{cc}
}

func (c *shippingServiceClient) ServiceStatus(ctx context.Context, in *ServiceStatusRequest, opts ...grpc.CallOption) (*ServiceStatusReply, error) {
	out := new(ServiceStatusReply)
	err := c.cc.Invoke(ctx, "/ShippingService/ServiceStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingServiceClient) ShippingOrder(ctx context.Context, in *ShippingOrderRequest, opts ...grpc.CallOption) (*ShippingOrderReply, error) {
	out := new(ShippingOrderReply)
	err := c.cc.Invoke(ctx, "/ShippingService/ShippingOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingServiceClient) FindShipping(ctx context.Context, in *FindShippingRequest, opts ...grpc.CallOption) (*FindShippingReply, error) {
	out := new(FindShippingReply)
	err := c.cc.Invoke(ctx, "/ShippingService/FindShipping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingServiceClient) GetAllShipping(ctx context.Context, in *GetAllShippingRequest, opts ...grpc.CallOption) (*GetAllShippingReply, error) {
	out := new(GetAllShippingReply)
	err := c.cc.Invoke(ctx, "/ShippingService/GetAllShipping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShippingServiceServer is the server API for ShippingService service.
// All implementations must embed UnimplementedShippingServiceServer
// for forward compatibility
type ShippingServiceServer interface {
	ServiceStatus(context.Context, *ServiceStatusRequest) (*ServiceStatusReply, error)
	ShippingOrder(context.Context, *ShippingOrderRequest) (*ShippingOrderReply, error)
	FindShipping(context.Context, *FindShippingRequest) (*FindShippingReply, error)
	GetAllShipping(context.Context, *GetAllShippingRequest) (*GetAllShippingReply, error)
	mustEmbedUnimplementedShippingServiceServer()
}

// UnimplementedShippingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShippingServiceServer struct {
}

func (UnimplementedShippingServiceServer) ServiceStatus(context.Context, *ServiceStatusRequest) (*ServiceStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceStatus not implemented")
}
func (UnimplementedShippingServiceServer) ShippingOrder(context.Context, *ShippingOrderRequest) (*ShippingOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShippingOrder not implemented")
}
func (UnimplementedShippingServiceServer) FindShipping(context.Context, *FindShippingRequest) (*FindShippingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindShipping not implemented")
}
func (UnimplementedShippingServiceServer) GetAllShipping(context.Context, *GetAllShippingRequest) (*GetAllShippingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllShipping not implemented")
}
func (UnimplementedShippingServiceServer) mustEmbedUnimplementedShippingServiceServer() {}

// UnsafeShippingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShippingServiceServer will
// result in compilation errors.
type UnsafeShippingServiceServer interface {
	mustEmbedUnimplementedShippingServiceServer()
}

func RegisterShippingServiceServer(s grpc.ServiceRegistrar, srv ShippingServiceServer) {
	s.RegisterService(&ShippingService_ServiceDesc, srv)
}

func _ShippingService_ServiceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).ServiceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ShippingService/ServiceStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).ServiceStatus(ctx, req.(*ServiceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingService_ShippingOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShippingOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).ShippingOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ShippingService/ShippingOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).ShippingOrder(ctx, req.(*ShippingOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingService_FindShipping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindShippingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).FindShipping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ShippingService/FindShipping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).FindShipping(ctx, req.(*FindShippingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingService_GetAllShipping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllShippingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).GetAllShipping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ShippingService/GetAllShipping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).GetAllShipping(ctx, req.(*GetAllShippingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShippingService_ServiceDesc is the grpc.ServiceDesc for ShippingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShippingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ShippingService",
	HandlerType: (*ShippingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServiceStatus",
			Handler:    _ShippingService_ServiceStatus_Handler,
		},
		{
			MethodName: "ShippingOrder",
			Handler:    _ShippingService_ShippingOrder_Handler,
		},
		{
			MethodName: "FindShipping",
			Handler:    _ShippingService_FindShipping_Handler,
		},
		{
			MethodName: "GetAllShipping",
			Handler:    _ShippingService_GetAllShipping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/shipping.proto",
}
